"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoxType = exports.BoxRefundType = exports.AccessType = void 0;
/* eslint max-len: 0 */
const mongoose_1 = require("mongoose");
var AccessType;
(function (AccessType) {
    AccessType["all"] = "all";
    AccessType["private"] = "private";
    AccessType["unpublish"] = "unpublish";
})(AccessType = exports.AccessType || (exports.AccessType = {}));
var BoxRefundType;
(function (BoxRefundType) {
    BoxRefundType["noRefund"] = "no-refund";
    BoxRefundType["allowRefund"] = "allow-refund";
})(BoxRefundType = exports.BoxRefundType || (exports.BoxRefundType = {}));
// leave it for future template maybe
var BoxType;
(function (BoxType) {
    BoxType["regular"] = "regular";
    BoxType["bundleLook"] = "bundle-look";
    BoxType["mysteryBox"] = "mystery-box";
    BoxType["series"] = "series";
})(BoxType = exports.BoxType || (exports.BoxType = {}));
const BoxSchema = new mongoose_1.Schema({
    creator: { type: mongoose_1.Schema.Types.ObjectId, ref: 'EventCreator' },
    name: { type: String, default: '' },
    seoTitle: { type: String },
    description: { type: String, default: '' },
    price: { type: Number },
    unboxItemsQuantity: { type: Number },
    // quantity: { type: Number, default: 0 },
    image: { type: String },
    gallery: [{ type: String }],
    video: { type: String },
    // mail: { type: Boolean, default: true }, // mail or pick up to buyers address
    createDate: { type: Date, default: Date.now },
    accessType: {
        type: String,
        enum: Object.values(AccessType),
        default: AccessType.unpublish,
    },
    deleted: { type: Boolean, default: false },
    boxType: {
        type: String,
        enum: Object.values(BoxType),
        default: BoxType.regular,
    },
    currency: { type: String, default: 'USD' },
    tags: [{ type: String }],
    tax: { type: Number, default: 0 },
    maxProductValueWithShipping: { type: Number, default: 0 },
});
BoxSchema.index({ creator: 1 });
BoxSchema.index({ tags: 1 });
// const Box = model<BoxModel>('MysteryBox', BoxSchema);
// export { Box, BoxSchema };
exports.default = (0, mongoose_1.model)('MysteryBox', BoxSchema);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm94LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZGVscy9teXN0ZXJ5LWJveC9ib3gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUJBQXVCO0FBQ3ZCLHVDQUF1RTtBQUV2RSxJQUFZLFVBSVg7QUFKRCxXQUFZLFVBQVU7SUFDcEIseUJBQVcsQ0FBQTtJQUNYLGlDQUFtQixDQUFBO0lBQ25CLHFDQUF1QixDQUFBO0FBQ3pCLENBQUMsRUFKVyxVQUFVLEdBQVYsa0JBQVUsS0FBVixrQkFBVSxRQUlyQjtBQUVELElBQVksYUFHWDtBQUhELFdBQVksYUFBYTtJQUN2Qix1Q0FBc0IsQ0FBQTtJQUN0Qiw2Q0FBNEIsQ0FBQTtBQUM5QixDQUFDLEVBSFcsYUFBYSxHQUFiLHFCQUFhLEtBQWIscUJBQWEsUUFHeEI7QUFFRCxxQ0FBcUM7QUFDckMsSUFBWSxPQUtYO0FBTEQsV0FBWSxPQUFPO0lBQ2pCLDhCQUFtQixDQUFBO0lBQ25CLHFDQUEwQixDQUFBO0lBQzFCLHFDQUEwQixDQUFBO0lBQzFCLDRCQUFpQixDQUFBO0FBQ25CLENBQUMsRUFMVyxPQUFPLEdBQVAsZUFBTyxLQUFQLGVBQU8sUUFLbEI7QUFxQ0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxpQkFBTSxDQUFDO0lBQzNCLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxpQkFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRTtJQUM3RCxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7SUFDbkMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtJQUMxQixXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7SUFDMUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtJQUN2QixrQkFBa0IsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7SUFDcEMsMENBQTBDO0lBQzFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7SUFDdkIsT0FBTyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFDM0IsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtJQUN2QiwrRUFBK0U7SUFFL0UsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtJQUM3QyxVQUFVLEVBQUU7UUFDVixJQUFJLEVBQUUsTUFBTTtRQUNaLElBQUksRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUMvQixPQUFPLEVBQUUsVUFBVSxDQUFDLFNBQVM7S0FDOUI7SUFDRCxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUU7SUFDMUMsT0FBTyxFQUFFO1FBQ1AsSUFBSSxFQUFFLE1BQU07UUFDWixJQUFJLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDNUIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO0tBQ3pCO0lBQ0QsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFO0lBQzFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0lBQ3hCLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRTtJQUNqQywyQkFBMkIsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRTtDQUMxRCxDQUFDLENBQUE7QUFFRixTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDL0IsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBRTVCLHdEQUF3RDtBQUV4RCw2QkFBNkI7QUFDN0Isa0JBQWUsSUFBQSxnQkFBSyxFQUFXLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBtYXgtbGVuOiAwICovXG5pbXBvcnQgeyBEb2N1bWVudCwgU2NoZW1hLCBtb2RlbCwgVHlwZXMsIExlYW5Eb2N1bWVudCB9IGZyb20gJ21vbmdvb3NlJ1xuXG5leHBvcnQgZW51bSBBY2Nlc3NUeXBlIHtcbiAgYWxsID0gJ2FsbCcsIC8vIHdpbGwgYmUgc2hvd24gc2VwYXJhdGx5IGF0IGJveCBzZWN0aW9uIG9mIGV2ZW50IHBhZ2UuIG9yIGF0IGl0cyBvd24gc3RvcmUsIG9yIHBsYXRmb3JtXG4gIHByaXZhdGUgPSAncHJpdmF0ZScsIC8vIHByaXZhdGUgbGlzdGluZ1xuICB1bnB1Ymxpc2ggPSAndW5wdWJsaXNoJyxcbn1cblxuZXhwb3J0IGVudW0gQm94UmVmdW5kVHlwZSB7XG4gIG5vUmVmdW5kID0gJ25vLXJlZnVuZCcsXG4gIGFsbG93UmVmdW5kID0gJ2FsbG93LXJlZnVuZCcsXG59XG5cbi8vIGxlYXZlIGl0IGZvciBmdXR1cmUgdGVtcGxhdGUgbWF5YmVcbmV4cG9ydCBlbnVtIEJveFR5cGUge1xuICByZWd1bGFyID0gJ3JlZ3VsYXInLFxuICBidW5kbGVMb29rID0gJ2J1bmRsZS1sb29rJyxcbiAgbXlzdGVyeUJveCA9ICdteXN0ZXJ5LWJveCcsXG4gIHNlcmllcyA9ICdzZXJpZXMnLFxufVxuXG4vLyBMT0NLOiBxdWFudGl0eVxuZXhwb3J0IGludGVyZmFjZSBCb3hNb2RlbCBleHRlbmRzIERvY3VtZW50IHtcbiAgY3JlYXRvcjogVHlwZXMuT2JqZWN0SWRcbiAgbmFtZTogc3RyaW5nXG4gIHNlb1RpdGxlPzogc3RyaW5nXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmdcbiAgcHJpY2U6IG51bWJlclxuICB1bmJveEl0ZW1zUXVhbnRpdHk6IG51bWJlciAvLyBzYXZlIHRoZSB1bmJveCByZWxhdGlvbnMgcXR5IGhlcmUuXG4gIC8vIHF1YW50aXR5OiBudW1iZXI7IC8vIGRlY2lkZWQgYnkgaG93IG1hbnkgY29tYm9zIGR5bmFtaWNhbGx5XG4gIGltYWdlOiBzdHJpbmdcbiAgZ2FsbGVyeTogc3RyaW5nW11cbiAgdmlkZW86IHN0cmluZ1xuICAvLyB0ZWxsIGNlYXRvciwgdGhleSBjYW4gY3JlYXRlIG9ubHkgb25lIHNoaXBwaW5nIGNvc3QgcGVyIGJveCwgZXZlbiBzb21ldGhpbmcgaXMgbW9yZSBleHBlbnNpdmUgb3IgZnJlZSB0byBzaGlwLlxuICAvLyBiZWNhdXNlIHdlIGRvIG5vdCBrbm93IHdoYXQgaXMgaW4gdGhlIGJveC4gd2UgY291bGQgc2F5IHRoZSBzaGlwcGluZyBmZWUgd2lsbCBiZSByZWZ1bmQgaWYgdGhlIGJveCBjb21tb2RpdHkgaXMgZnJlZSB0byBzaGlwLlxuICAvLyBzaGlwcGluZ0Nvc3Q6IFNoaXBwaW5nQ29zdFtdOyAgIC0tPj4+PiBTaGlwcGluZ1Byb2ZpbGVcblxuICAvLyBUT0RPIGluIHRoZSBmdXR1cmUsIHdlIHNob3VsZCBzYXZlIHNoaXBwaW5nIGFkZHJlc3MgaW4gdXNlciwgc28gdGhleSBkb250IG5lZWQgdG8gcmVmaWxsLlxuICAvLyBtYWlsOiBib29sZWFuOyAvLyB1c2UgY29tbW9kaXR5IG1haWxcbiAgY3JlYXRlRGF0ZTogRGF0ZVxuICBhY2Nlc3NUeXBlOiBBY2Nlc3NUeXBlIC8vIHRvIHNob3cgb24gYm94IHdlYnNpdGUgb3Igb25seSBmb3IgdGlja2V0aW5nIGJ1bmRsZS5cbiAgZGVsZXRlZDogYm9vbGVhbiAvLyBkZWxldGUgZnJvbSBkYXNoYm9hcmRcbiAgYm94VHlwZTogQm94VHlwZSAvLyBidWlsdCBmb3IgZGlmZmVyZW50IGNhdGVnb3JpZXMuIHByZWRlZmluZWQuIG1heWJlIGNsb3Rocy4gb3IgLi4uLiBmb3Igbm93IG5vdGhpbmcuIG9yIG1heWJlIHNldHVwIHB1cnBvc2UsIGxpa2Ugd2hhdCB5b3Ugd2FudFxuICAvLyB0byBkbyB3aXRoIGJveGVzLiBkbyBub3QgbWl4IHRvbyBkaWZmZXJlbnQgc3R1ZmYuXG4gIGN1cnJlbmN5OiBzdHJpbmcgLy8gYm94IGN1cnJlbmN5IHdpbGwgdXNlIHN0b3JlIGN1cnJlbmN5XG4gIC8vIGZvciBwbGF0Zm9ybSB0byBzZWFyY2hcbiAgdGFnczogc3RyaW5nW11cbiAgLy8gZm9yIHBsYXRmb3JtIHRvIHNob3cgYm94XG4gIC8vIGJveFNob3dUeXBlOiBCb3hTaG93VHlwZTtcbiAgLy8gdGF4IG1hbnVhbFxuICB0YXg6IG51bWJlciAvLyAwLjEzIGV4XG4gIG1heFByb2R1Y3RWYWx1ZVdpdGhTaGlwcGluZzogbnVtYmVyXG59XG5cbmV4cG9ydCB0eXBlIElCb3hNb2RlbCA9IExlYW5Eb2N1bWVudDxCb3hNb2RlbD5cblxuY29uc3QgQm94U2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gIGNyZWF0b3I6IHsgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLCByZWY6ICdFdmVudENyZWF0b3InIH0sIC8vIGV2ZW50IGNyZWF0b3Igd2lsbCBiZSBzYWFzIGFkbWluIGZvciBib3ggYW5kIGV2ZW50cy5cbiAgbmFtZTogeyB0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6ICcnIH0sXG4gIHNlb1RpdGxlOiB7IHR5cGU6IFN0cmluZyB9LFxuICBkZXNjcmlwdGlvbjogeyB0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6ICcnIH0sXG4gIHByaWNlOiB7IHR5cGU6IE51bWJlciB9LCAvLyBzaG91bGQgY2FsY3VsYXRlIGZyb20gY29tbW9kaXRpZXMgaW4gYm94LCB0aGVpciBzaGlwcGluZyBmZWUgdmFyeS4gZnJvbSBzaGlwcGluZyB6b25lcy5cbiAgdW5ib3hJdGVtc1F1YW50aXR5OiB7IHR5cGU6IE51bWJlciB9LFxuICAvLyBxdWFudGl0eTogeyB0eXBlOiBOdW1iZXIsIGRlZmF1bHQ6IDAgfSxcbiAgaW1hZ2U6IHsgdHlwZTogU3RyaW5nIH0sXG4gIGdhbGxlcnk6IFt7IHR5cGU6IFN0cmluZyB9XSxcbiAgdmlkZW86IHsgdHlwZTogU3RyaW5nIH0sXG4gIC8vIG1haWw6IHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogdHJ1ZSB9LCAvLyBtYWlsIG9yIHBpY2sgdXAgdG8gYnV5ZXJzIGFkZHJlc3NcblxuICBjcmVhdGVEYXRlOiB7IHR5cGU6IERhdGUsIGRlZmF1bHQ6IERhdGUubm93IH0sXG4gIGFjY2Vzc1R5cGU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZW51bTogT2JqZWN0LnZhbHVlcyhBY2Nlc3NUeXBlKSxcbiAgICBkZWZhdWx0OiBBY2Nlc3NUeXBlLnVucHVibGlzaCxcbiAgfSxcbiAgZGVsZXRlZDogeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiBmYWxzZSB9LFxuICBib3hUeXBlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGVudW06IE9iamVjdC52YWx1ZXMoQm94VHlwZSksXG4gICAgZGVmYXVsdDogQm94VHlwZS5yZWd1bGFyLFxuICB9LFxuICBjdXJyZW5jeTogeyB0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6ICdVU0QnIH0sXG4gIHRhZ3M6IFt7IHR5cGU6IFN0cmluZyB9XSwgLy8gbWF4aW11bSAzIHRhZ3MuIGZyb20gdGFnZ2luZy5cbiAgdGF4OiB7IHR5cGU6IE51bWJlciwgZGVmYXVsdDogMCB9LFxuICBtYXhQcm9kdWN0VmFsdWVXaXRoU2hpcHBpbmc6IHsgdHlwZTogTnVtYmVyLCBkZWZhdWx0OiAwIH0sXG59KVxuXG5Cb3hTY2hlbWEuaW5kZXgoeyBjcmVhdG9yOiAxIH0pXG5Cb3hTY2hlbWEuaW5kZXgoeyB0YWdzOiAxIH0pXG5cbi8vIGNvbnN0IEJveCA9IG1vZGVsPEJveE1vZGVsPignTXlzdGVyeUJveCcsIEJveFNjaGVtYSk7XG5cbi8vIGV4cG9ydCB7IEJveCwgQm94U2NoZW1hIH07XG5leHBvcnQgZGVmYXVsdCBtb2RlbDxCb3hNb2RlbD4oJ015c3RlcnlCb3gnLCBCb3hTY2hlbWEpXG4iXX0=